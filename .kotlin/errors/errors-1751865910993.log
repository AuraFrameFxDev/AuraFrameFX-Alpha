kotlin version: 2.2.0
error message: org.jetbrains.kotlin.backend.common.CompilationException: Back-end: Please report this problem https://kotl.in/issue
/workspaces/AuraFrameFX-Alpha/app/src/main/java/dev/aurakai/auraframefx/api/client/models/TaskScheduleRequest.kt:30:1
Problem with `@Serializable
@StabilityInferred(parameters = 0)
data class TaskScheduleRequest {
  constructor(taskType: String, agentType: AgentType, details: Map<String, Any>, priority: Priority? = Priority.NORMAL) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  @SerialName(value = "taskType")
  val taskType: String
    field = taskType
    get

  @Contextual
  @SerialName(value = "agentType")
  val agentType: AgentType
    field = agentType
    get

  @Contextual
  @SerialName(value = "details")
  val details: Map<String, Any>
    field = details
    get

  @SerialName(value = "priority")
  val priority: Priority?
    field = priority
    get

  @Serializable
  enum class Priority : Enum<Priority> {
    private constructor(value: String) /* primary */ {
      super/*Enum*/<Priority>()
      /* <init>() */

    }

    val value: String
      field = value
      get

    @SerialName(value = "HIGH")
    HIGH = Priority(value = "HIGH")

    @SerialName(value = "NORMAL")
    NORMAL = Priority(value = "NORMAL")

    @SerialName(value = "LOW")
    LOW = Priority(value = "LOW")

    /* static */ fun values(): Array<Priority> /* Synthetic body for ENUM_VALUES */

    /* static */ fun valueOf(value: String): Priority /* Synthetic body for ENUM_VALUEOF */

    /* static */ val entries: EnumEntries<Priority>
      get(): EnumEntries<Priority> /* Synthetic body for ENUM_ENTRIES */

    companion object Companion {
      private constructor() /* primary */ {
        super/*Any*/()
        /* <init>() */

      }

      fun serializer(): KSerializer<Priority>

      /* fake */ override operator fun equals(other: Any?): Boolean

      /* fake */ override fun hashCode(): Int

      /* fake */ override fun toString(): String

    }

    /* fake */ override operator fun compareTo(other: Priority): Int

    protected /* fake */ override fun clone(): Any

    /* fake */ override operator fun equals(other: Any?): Boolean

    /* fake */ override fun hashCode(): Int

    /* fake */ override fun toString(): String

    @IntrinsicConstEvaluation
    /* fake */ override val name: String
      /* fake */ override get(): String

    /* fake */ override val ordinal: Int
      /* fake */ override get(): Int

    protected_and_package /* fake */ override fun finalize()

    @RecentlyNonNull
    /* fake */ override fun getDeclaringClass(): @FlexibleNullability Class<@FlexibleNullability Priority?>?

  }

  companion object Companion {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    fun serializer(): KSerializer<TaskScheduleRequest>

    /* fake */ override operator fun equals(other: Any?): Boolean

    /* fake */ override fun hashCode(): Int

    /* fake */ override fun toString(): String

  }

  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  @StabilityInferred(parameters = 0)
  object $serializer : GeneratedSerializer<TaskScheduleRequest> {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    override fun serialize(encoder: Encoder, value: TaskScheduleRequest)

    override fun deserialize(decoder: Decoder): TaskScheduleRequest

    override val descriptor: SerialDescriptor
      override get

    override fun childSerializers(): Array<KSerializer<*>>

    /* fake */ override fun typeParametersSerializers(): Array<KSerializer<*>>

    /* fake */ override operator fun equals(other: Any?): Boolean

    /* fake */ override fun hashCode(): Int

    /* fake */ override fun toString(): String

    /* static final field */ val $stable: Int = 8
  }

  operator fun component1(): String {
    return <this>.#taskType
  }

  operator fun component2(): AgentType {
    return <this>.#agentType
  }

  operator fun component3(): Map<String, Any> {
    return <this>.#details
  }

  operator fun component4(): Priority? {
    return <this>.#priority
  }

  fun copy(taskType: String = <this>.#taskType, agentType: AgentType = <this>.#agentType, details: Map<String, Any> = <this>.#details, priority: Priority? = <this>.#priority): TaskScheduleRequest {
    return TaskScheduleRequest(taskType = taskType, agentType = agentType, details = details, priority = priority)
  }

  override fun toString(): String {
    return "TaskScheduleRequest(" + "taskType=" + <this>.#taskType + ", " + "agentType=" + <this>.#agentType + ", " + "details=" + <this>.#details + ", " + "priority=" + <this>.#priority + ")"
  }

  override fun hashCode(): Int {
    var result: Int = <this>.#taskType.hashCode()
    result = result.times(other = 31).plus(other = <this>.#agentType.hashCode())
    result = result.times(other = 31).plus(other = <this>.#details.hashCode())
    result = result.times(other = 31).plus(other = when {
      EQEQ(arg0 = <this>.#priority, arg1 = null) -> 0
      else -> <this>.#priority.hashCode()
    })
    return result
  }

  override operator fun equals(other: Any?): Boolean {
    when {
      EQEQEQ(arg0 = <this>, arg1 = other) -> return true
    }
    when {
      other !is TaskScheduleRequest -> return false
    }
    val tmp0_other_with_cast: TaskScheduleRequest = other as TaskScheduleRequest
    when {
      EQEQ(arg0 = <this>.#taskType, arg1 = tmp0_other_with_cast.#taskType).not() -> return false
    }
    when {
      EQEQ(arg0 = <this>.#agentType, arg1 = tmp0_other_with_cast.#agentType).not() -> return false
    }
    when {
      EQEQ(arg0 = <this>.#details, arg1 = tmp0_other_with_cast.#details).not() -> return false
    }
    when {
      EQEQ(arg0 = <this>.#priority, arg1 = tmp0_other_with_cast.#priority).not() -> return false
    }
    return true
  }

  /* static final field */ val $stable: Int = 8
  @JvmStatic
  internal /* static */ fun write$Self(self: TaskScheduleRequest, output: CompositeEncoder, serialDesc: SerialDescriptor)

  internal constructor(seen0: Int, taskType: String?, agentType: AgentType?, details: Map<String, Any>?, priority: Priority?, serializationConstructorMarker: SerializationConstructorMarker?)

}

`
Details: kotlinx.serialization compiler plugin internal error: unable to transform declaration, see cause
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializerClassLowering.lower(SerializationLoweringExtension.kt:233)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt$runOnFileInOrder$1.visitClass(SerializationLoweringExtension.kt:46)
	at org.jetbrains.kotlin.ir.visitors.IrVisitorVoid.visitClass(IrVisitorVoid.kt:44)
	at org.jetbrains.kotlin.ir.visitors.IrVisitorVoid.visitClass(IrVisitorVoid.kt:18)
	at org.jetbrains.kotlin.ir.declarations.IrClass.accept(IrClass.kt:72)
	at org.jetbrains.kotlin.ir.declarations.IrPackageFragment.acceptChildren(IrPackageFragment.kt:27)
	at org.jetbrains.kotlin.ir.visitors.IrVisitorsKt.acceptChildrenVoid(IrVisitors.kt:23)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt$runOnFileInOrder$1.visitElement(SerializationLoweringExtension.kt:42)
	at org.jetbrains.kotlin.ir.visitors.IrVisitorVoid.visitPackageFragment(IrVisitorVoid.kt:168)
	at org.jetbrains.kotlin.ir.visitors.IrVisitorVoid.visitFile(IrVisitorVoid.kt:184)
	at org.jetbrains.kotlin.ir.visitors.IrVisitorVoid.visitFile(IrVisitorVoid.kt:180)
	at org.jetbrains.kotlin.ir.visitors.IrVisitorVoid.visitFile(IrVisitorVoid.kt:18)
	at org.jetbrains.kotlin.ir.declarations.IrFile.accept(IrFile.kt:27)
	at org.jetbrains.kotlin.ir.visitors.IrVisitorsKt.acceptVoid(IrVisitors.kt:11)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt.runOnFileInOrder(SerializationLoweringExtension.kt:40)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtension.generate(SerializationLoweringExtension.kt:197)
	at org.jetbrains.kotlin.fir.pipeline.ConvertToIrKt.applyIrGenerationExtensions(convertToIr.kt:468)
	at org.jetbrains.kotlin.fir.pipeline.Fir2IrPipeline.runActualizationPipeline(convertToIr.kt:245)
	at org.jetbrains.kotlin.fir.pipeline.Fir2IrPipeline.convertToIrAndActualize(convertToIr.kt:128)
	at org.jetbrains.kotlin.fir.pipeline.ConvertToIrKt.convertToIrAndActualize(convertToIr.kt:97)
	at org.jetbrains.kotlin.fir.pipeline.ConvertToIrKt.convertToIrAndActualize$default(convertToIr.kt:72)
	at org.jetbrains.kotlin.cli.jvm.compiler.legacy.pipeline.JvmCompilerPipelineKt.convertToIrAndActualizeForJvm(jvmCompilerPipeline.kt:109)
	at org.jetbrains.kotlin.cli.pipeline.jvm.JvmFir2IrPipelinePhase.executePhase(JvmFir2IrPipelinePhase.kt:26)
	at org.jetbrains.kotlin.cli.pipeline.jvm.JvmFir2IrPipelinePhase.executePhase(JvmFir2IrPipelinePhase.kt:17)
	at org.jetbrains.kotlin.cli.pipeline.PipelinePhase.phaseBody(PipelinePhase.kt:68)
	at org.jetbrains.kotlin.cli.pipeline.PipelinePhase.phaseBody(PipelinePhase.kt:58)
	at org.jetbrains.kotlin.config.phaser.NamedCompilerPhase.invoke(CompilerPhase.kt:102)
	at org.jetbrains.kotlin.backend.common.phaser.CompositePhase.invoke(PhaseBuilders.kt:22)
	at org.jetbrains.kotlin.config.phaser.CompilerPhaseKt.invokeToplevel(CompilerPhase.kt:53)
	at org.jetbrains.kotlin.cli.pipeline.AbstractCliPipeline.runPhasedPipeline(AbstractCliPipeline.kt:109)
	at org.jetbrains.kotlin.cli.pipeline.AbstractCliPipeline.execute(AbstractCliPipeline.kt:68)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecutePhased(K2JVMCompiler.kt:78)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecutePhased(K2JVMCompiler.kt:44)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:90)
	at org.jetbrains.kotlin.cli.common.CLICompiler.exec(CLICompiler.kt:352)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunnerBase.runCompiler(IncrementalJvmCompilerRunnerBase.kt:175)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunnerBase.runCompiler(IncrementalJvmCompilerRunnerBase.kt:38)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.doCompile(IncrementalCompilerRunner.kt:504)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileImpl(IncrementalCompilerRunner.kt:421)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:306)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:133)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:679)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:93)
	at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1806)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:360)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:712)
	at java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:587)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:828)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:705)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:704)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.IllegalStateException: Serializer for element of type kotlin.Any has not been found
	at org.jetbrains.kotlinx.serialization.compiler.backend.ir.SerializerSearchUtilKt.findTypeSerializerOrContext(SerializerSearchUtil.kt:85)
	at org.jetbrains.kotlinx.serialization.compiler.backend.ir.BaseIrGenerator.createSerializerOnlyForClasses(BaseIrGenerator.kt:515)
	at org.jetbrains.kotlinx.serialization.compiler.backend.ir.BaseIrGenerator.cacheableChildSerializerInstance(BaseIrGenerator.kt:483)
	at org.jetbrains.kotlinx.serialization.compiler.backend.ir.BaseIrGenerator.createCachedChildSerializers(BaseIrGenerator.kt:469)
	at org.jetbrains.kotlinx.serialization.compiler.backend.ir.SerializableIrGenerator.<init>(SerializableIrGenerator.kt:60)
	at org.jetbrains.kotlinx.serialization.compiler.backend.ir.SerializableIrGenerator$Companion.generate(SerializableIrGenerator.kt:405)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializerClassLowering.lower(SerializationLoweringExtension.kt:149)
	... 60 more
