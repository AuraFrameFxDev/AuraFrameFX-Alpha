package dev.aurakai.auraframefx.network

import dev.aurakai.auraframefx.api.AiContentApi
import dev.aurakai.auraframefx.model.GenerateImageDescriptionRequest
// import dev.aurakai.auraframefx.model.GenerateTextRequest // This model is now generated by OpenAPI
import javax.inject.Inject
import javax.inject.Singleton

/**
 * Client wrapper for the AuraFrameFx AI Content API.
 * Provides clean methods to access text and image description generation capabilities.
 */
@Singleton
class AuraFxContentApiClient @Inject constructor(
    private val aiContentApi: AiContentApi,
) {
    /**
     * Requests AI-generated text from the API based on the given prompt and optional parameters.
     *
     * @param prompt The input text prompt for content generation.
     * @param maxTokens Optional maximum number of tokens for the generated text. Defaults to 500 if not specified.
     * @param temperature Optional value controlling the randomness of the output. Defaults to 0.7 if not specified.
     * @return The API response containing the generated text and the reason for completion.
     */
    suspend fun generateText(
        prompt: String,
        maxTokens: Int? = null,
        temperature: Float? = null,
    ) = aiContentApi.generateText(
        dev.aurakai.auraframefx.api.model.GenerateTextRequest( // Use the generated model
            prompt = prompt,
            maxTokens = maxTokens ?: 500,
            temperature = temperature ?: 0.7f
        )
    )

    /**
     * Generates a descriptive caption for an image based on provided URL and optional context.
     *
     * @param imageUrl URL of the image to describe
     * @param context Additional context for the image description (optional)
     * @return The API response containing the image description
     */
    // suspend fun generateImageDescription(
    //     imageUrl: String,
    //     context: String? = null,
    // ) = aiContentApi.generateImageDescription( // This method doesn't exist on AiContentApi
    //     GenerateImageDescriptionRequest(
    //         imageUrl = imageUrl,
    //         context = context
    //     )
    // )
}
