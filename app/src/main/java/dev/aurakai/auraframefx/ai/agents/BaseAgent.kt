package dev.aurakai.auraframefx.ai.agents

import dev.aurakai.auraframefx.model.AgentResponse

import dev.aurakai.auraframefx.api.model.AgentType // Corrected import
import dev.aurakai.auraframefx.model.AiRequest
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flow
 

/**
 * Base implementation of the [Agent] interface.
 * @param agentName The name of the agent.

 * @param agentType The string representation of the agent type, to be mapped to [AgentType].
 */
open class BaseAgent(
    private val _agentName: String,
    private val _agentType: String,

) : Agent {

    /**
     * Returns the name of the agent.
     *
     * @return The agent's name, or null if not set.
     */
    override fun getName(): String? {
        return _agentName
    }

    /**
     * Returns the agent's type as an `AgentType` enum.
     *
     * @return The corresponding `AgentType` for this agent.
     * @throws IllegalArgumentException if the internal type string does not match any valid `AgentType` value.
     */
    override fun getType(): AgentType { // Return non-nullable AgentType from api.model
        return try {
            AgentType.valueOf(_agentType.uppercase())
        } catch (e: IllegalArgumentException) {
            // Or handle error more gracefully, e.g., map to a default or throw
            throw IllegalArgumentException("Invalid agent type string: $_agentType", e)
        }
    }

    /**
     * Processes an AI request and returns a default response indicating the agent's name and provided context.
     *
     * This base implementation is intended to be overridden by subclasses for custom behavior.
     *
     * @param request The AI request containing the prompt to process.
     * @param context Additional context information for the request.
     * @return An [AgentResponse] with a message referencing the prompt, agent name, and context, marked as successful.
     */

    override suspend fun processRequest(request: AiRequest, context: String): AgentResponse {
        // Default implementation for base agent, override in subclasses
        return AgentResponse(
            content = "BaseAgent response to '${request.query}' for agent $_agentName with context '$context'",
            confidence = 1.0f
        )
    }
    /**
     * Returns a flow emitting a default agent response for the given request.
     *
     * The response includes the request query and agent name with a fixed confidence score. Intended to be overridden by subclasses for custom streaming behavior.
     *
     * @return A flow containing a single default `AgentResponse`.
     */
=
    /**
     * Returns a flow emitting a single default [AgentResponse] for the given [request].
     *
     * This implementation calls [processRequest] with a fixed dummy context and emits the result.
     * Subclasses can override this method to provide custom streaming or multi-step response behavior.
     *
     * @param request The AI request to process.
     * @return A [Flow] emitting a single [AgentResponse].
     */
    /**
     * Returns a flow emitting a single default `AgentResponse` for the given AI request.
     *
     * Calls `processRequest` with the provided request and a fixed dummy context. Designed to be overridden by subclasses for custom streaming or multi-step response logic.
     *
     * @param request The AI request to process.
     * @return A flow emitting one `AgentResponse` generated by the base implementation.
     */

    /**
     * Returns a flow emitting a single agent response for the given request using a default context.
     *
     * This basic implementation is intended to be overridden for agents that support streaming or contextual flows.
     *
     * @param request The AI request to process.
     * @return A flow emitting one AgentResponse generated from the request.
     */
    override fun processRequestFlow(request: AiRequest): Flow<AgentResponse> {
        // Basic implementation, can be overridden for more complex streaming logic
        return flow {
            // For simplicity, using a dummy context. Subclasses should provide meaningful context.
            emit(processRequest(request, "DefaultContext_BaseAgentFlow"))
        }
    }

    // These methods are not part of the Agent interface, so @Override is removed.
    /**
     * Returns a map describing the agent's basic capabilities and metadata.
     *
     * The map includes the agent's name, type, and a flag indicating that this is the base implementation.
     *
     * @return A map with keys "name", "type", and "base_implemented".
     */
    fun getCapabilities(): Map<String, Any> {
        return mapOf("name" to _agentName, "type" to _agentType, "base_implemented" to true)
    }

    /**
     * Returns the agent's continuous memory, or null if not implemented.
     *
     * By default, this base implementation does not provide continuous memory.
     * Subclasses may override to return agent-specific memory objects.
     *
     * @return The continuous memory object, or null if unavailable.
     */
    fun getContinuousMemory(): Any? {
        return null
    }

    /**
     * Returns a list of base ethical guidelines for the agent.
     *
     * @return A list of ethical guideline strings.
     */
    fun getEthicalGuidelines(): List<String> {
        return listOf("Be helpful.", "Be harmless.", "Adhere to base agent principles.")
    }

    /**
     * Returns the agent's learning history.
     *
     * By default, this returns an empty list, indicating no learning history is stored.
     *
     * @return An empty list representing the absence of learning history.
     */
    fun getLearningHistory(): List<String> {
        return emptyList()
    }

}
