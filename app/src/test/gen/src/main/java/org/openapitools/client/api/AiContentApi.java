/*
 * AuraFrameFX Ecosystem API
<<<<<<< HEAD
 * A comprehensive API for interacting with the AuraFrameFX AI Super Dimensional Ecosystem. Provides access to generative AI capabilities, system customization, user management, and core application features.
=======
 * A comprehensive API for interacting with the AuraFrameFX AI Super Dimensional Ecosystem. Provides access to generative AI capabilities, system customization, user management, and core application features. 
>>>>>>> origin/coderabbitai/docstrings/78f34ad
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@auraframefx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.GenerateImageDescriptionRequest;
import org.openapitools.client.model.GenerateImageDescriptionResponse;
import org.openapitools.client.model.GenerateTextRequest;
import org.openapitools.client.model.GenerateTextResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AiContentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AiContentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AiContentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for aiGenerateImageDescriptionPost
<<<<<<< HEAD
     *
     * @param generateImageDescriptionRequest (required)
     * @param _callback                       Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Image description generated successfully </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Invalid request parameters </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
=======
     * @param generateImageDescriptionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image description generated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
>>>>>>> origin/coderabbitai/docstrings/78f34ad
     */
    public okhttp3.Call aiGenerateImageDescriptionPostCall(GenerateImageDescriptionRequest generateImageDescriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
<<<<<<< HEAD
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
=======
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
>>>>>>> origin/coderabbitai/docstrings/78f34ad
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateImageDescriptionRequest;

        // create path and map variables
        String localVarPath = "/ai/generate/image-description";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
<<<<<<< HEAD
                "application/json"
=======
            "application/json"
>>>>>>> origin/coderabbitai/docstrings/78f34ad
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
<<<<<<< HEAD
                "application/json"
=======
            "application/json"
>>>>>>> origin/coderabbitai/docstrings/78f34ad
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

<<<<<<< HEAD
        String[] localVarAuthNames = new String[]{};
=======
        String[] localVarAuthNames = new String[] {  };
>>>>>>> origin/coderabbitai/docstrings/78f34ad
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aiGenerateImageDescriptionPostValidateBeforeCall(GenerateImageDescriptionRequest generateImageDescriptionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'generateImageDescriptionRequest' is set
        if (generateImageDescriptionRequest == null) {
            throw new ApiException("Missing the required parameter 'generateImageDescriptionRequest' when calling aiGenerateImageDescriptionPost(Async)");
        }

        return aiGenerateImageDescriptionPostCall(generateImageDescriptionRequest, _callback);

    }

    /**
     * Generate image description using AI
     * Generate a description for the provided image URL
<<<<<<< HEAD
     *
     * @param generateImageDescriptionRequest (required)
     * @return GenerateImageDescriptionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Image description generated successfully </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Invalid request parameters </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
=======
     * @param generateImageDescriptionRequest  (required)
     * @return GenerateImageDescriptionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image description generated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
>>>>>>> origin/coderabbitai/docstrings/78f34ad
     */
    public GenerateImageDescriptionResponse aiGenerateImageDescriptionPost(GenerateImageDescriptionRequest generateImageDescriptionRequest) throws ApiException {
        ApiResponse<GenerateImageDescriptionResponse> localVarResp = aiGenerateImageDescriptionPostWithHttpInfo(generateImageDescriptionRequest);
        return localVarResp.getData();
    }

    /**
     * Generate image description using AI
     * Generate a description for the provided image URL
<<<<<<< HEAD
     *
     * @param generateImageDescriptionRequest (required)
     * @return ApiResponse&lt;GenerateImageDescriptionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Image description generated successfully </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Invalid request parameters </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GenerateImageDescriptionResponse> aiGenerateImageDescriptionPostWithHttpInfo(GenerateImageDescriptionRequest generateImageDescriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = aiGenerateImageDescriptionPostValidateBeforeCall(generateImageDescriptionRequest, null);
        Type localVarReturnType = new TypeToken<GenerateImageDescriptionResponse>() {
        }.getType();
=======
     * @param generateImageDescriptionRequest  (required)
     * @return ApiResponse&lt;GenerateImageDescriptionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image description generated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenerateImageDescriptionResponse> aiGenerateImageDescriptionPostWithHttpInfo(GenerateImageDescriptionRequest generateImageDescriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = aiGenerateImageDescriptionPostValidateBeforeCall(generateImageDescriptionRequest, null);
        Type localVarReturnType = new TypeToken<GenerateImageDescriptionResponse>(){}.getType();
>>>>>>> origin/coderabbitai/docstrings/78f34ad
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate image description using AI (asynchronously)
     * Generate a description for the provided image URL
<<<<<<< HEAD
     *
     * @param generateImageDescriptionRequest (required)
     * @param _callback                       The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Image description generated successfully </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Invalid request parameters </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
=======
     * @param generateImageDescriptionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image description generated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
>>>>>>> origin/coderabbitai/docstrings/78f34ad
     */
    public okhttp3.Call aiGenerateImageDescriptionPostAsync(GenerateImageDescriptionRequest generateImageDescriptionRequest, final ApiCallback<GenerateImageDescriptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = aiGenerateImageDescriptionPostValidateBeforeCall(generateImageDescriptionRequest, _callback);
<<<<<<< HEAD
        Type localVarReturnType = new TypeToken<GenerateImageDescriptionResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for generateTextPost
     *
     * @param generateTextRequest (required)
     * @param _callback           Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Text generated successfully </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Invalid request format or parameters </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Authentication credentials were missing or incorrect </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     * </table>
=======
        Type localVarReturnType = new TypeToken<GenerateImageDescriptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateTextPost
     * @param generateTextRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Text generated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request format or parameters </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials were missing or incorrect </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
>>>>>>> origin/coderabbitai/docstrings/78f34ad
     */
    public okhttp3.Call generateTextPostCall(GenerateTextRequest generateTextRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
<<<<<<< HEAD
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
=======
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
>>>>>>> origin/coderabbitai/docstrings/78f34ad
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateTextRequest;

        // create path and map variables
        String localVarPath = "/generate-text";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
<<<<<<< HEAD
                "application/json"
=======
            "application/json"
>>>>>>> origin/coderabbitai/docstrings/78f34ad
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
<<<<<<< HEAD
                "application/json"
=======
            "application/json"
>>>>>>> origin/coderabbitai/docstrings/78f34ad
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

<<<<<<< HEAD
        String[] localVarAuthNames = new String[]{"OAuth2AuthCode"};
=======
        String[] localVarAuthNames = new String[] { "OAuth2AuthCode" };
>>>>>>> origin/coderabbitai/docstrings/78f34ad
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateTextPostValidateBeforeCall(GenerateTextRequest generateTextRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'generateTextRequest' is set
        if (generateTextRequest == null) {
            throw new ApiException("Missing the required parameter 'generateTextRequest' when calling generateTextPost(Async)");
        }

        return generateTextPostCall(generateTextRequest, _callback);

    }

    /**
     * Generate text content
<<<<<<< HEAD
     *
     * @param generateTextRequest (required)
     * @return GenerateTextResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Text generated successfully </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Invalid request format or parameters </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Authentication credentials were missing or incorrect </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     * </table>
=======
     * 
     * @param generateTextRequest  (required)
     * @return GenerateTextResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Text generated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request format or parameters </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials were missing or incorrect </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
>>>>>>> origin/coderabbitai/docstrings/78f34ad
     */
    public GenerateTextResponse generateTextPost(GenerateTextRequest generateTextRequest) throws ApiException {
        ApiResponse<GenerateTextResponse> localVarResp = generateTextPostWithHttpInfo(generateTextRequest);
        return localVarResp.getData();
    }

    /**
     * Generate text content
<<<<<<< HEAD
     *
     * @param generateTextRequest (required)
     * @return ApiResponse&lt;GenerateTextResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Text generated successfully </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Invalid request format or parameters </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Authentication credentials were missing or incorrect </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GenerateTextResponse> generateTextPostWithHttpInfo(GenerateTextRequest generateTextRequest) throws ApiException {
        okhttp3.Call localVarCall = generateTextPostValidateBeforeCall(generateTextRequest, null);
        Type localVarReturnType = new TypeToken<GenerateTextResponse>() {
        }.getType();
=======
     * 
     * @param generateTextRequest  (required)
     * @return ApiResponse&lt;GenerateTextResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Text generated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request format or parameters </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials were missing or incorrect </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenerateTextResponse> generateTextPostWithHttpInfo(GenerateTextRequest generateTextRequest) throws ApiException {
        okhttp3.Call localVarCall = generateTextPostValidateBeforeCall(generateTextRequest, null);
        Type localVarReturnType = new TypeToken<GenerateTextResponse>(){}.getType();
>>>>>>> origin/coderabbitai/docstrings/78f34ad
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate text content (asynchronously)
<<<<<<< HEAD
     *
     * @param generateTextRequest (required)
     * @param _callback           The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Text generated successfully </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Invalid request format or parameters </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Authentication credentials were missing or incorrect </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     * </table>
=======
     * 
     * @param generateTextRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Text generated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request format or parameters </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication credentials were missing or incorrect </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
     </table>
>>>>>>> origin/coderabbitai/docstrings/78f34ad
     */
    public okhttp3.Call generateTextPostAsync(GenerateTextRequest generateTextRequest, final ApiCallback<GenerateTextResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateTextPostValidateBeforeCall(generateTextRequest, _callback);
<<<<<<< HEAD
        Type localVarReturnType = new TypeToken<GenerateTextResponse>() {
        }.getType();
=======
        Type localVarReturnType = new TypeToken<GenerateTextResponse>(){}.getType();
>>>>>>> origin/coderabbitai/docstrings/78f34ad
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
