/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.ErrorResponse
import org.openapitools.client.models.TaskScheduleRequest
import org.openapitools.client.models.TaskStatus

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

<<<<<<< HEAD
class TasksApi(
    basePath: kotlin.String = defaultBasePath,
    client: OkHttpClient = ApiClient.defaultClient
) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties()
                .getProperty(ApiClient.baseUrlKey, "https://api.auraframefx.com/v1")
=======
class TasksApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.auraframefx.com/v1")
>>>>>>> origin/coderabbitai/docstrings/78f34ad
        }
    }

    /**
     * Schedule a new task
<<<<<<< HEAD
     *
     * @param taskScheduleRequest
=======
     * 
     * @param taskScheduleRequest 
>>>>>>> origin/coderabbitai/docstrings/78f34ad
     * @return TaskStatus
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
<<<<<<< HEAD
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun tasksSchedulePost(taskScheduleRequest: TaskScheduleRequest): TaskStatus {
        val localVarResponse =
            tasksSchedulePostWithHttpInfo(taskScheduleRequest = taskScheduleRequest)
=======
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tasksSchedulePost(taskScheduleRequest: TaskScheduleRequest) : TaskStatus {
        val localVarResponse = tasksSchedulePostWithHttpInfo(taskScheduleRequest = taskScheduleRequest)
>>>>>>> origin/coderabbitai/docstrings/78f34ad

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TaskStatus
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
<<<<<<< HEAD
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse
                )
=======
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
>>>>>>> origin/coderabbitai/docstrings/78f34ad
            }
        }
    }

    /**
     * Schedule a new task
<<<<<<< HEAD
     *
     * @param taskScheduleRequest
=======
     * 
     * @param taskScheduleRequest 
>>>>>>> origin/coderabbitai/docstrings/78f34ad
     * @return ApiResponse<TaskStatus?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
<<<<<<< HEAD
    fun tasksSchedulePostWithHttpInfo(taskScheduleRequest: TaskScheduleRequest): ApiResponse<TaskStatus?> {
        val localVariableConfig =
            tasksSchedulePostRequestConfig(taskScheduleRequest = taskScheduleRequest)
=======
    fun tasksSchedulePostWithHttpInfo(taskScheduleRequest: TaskScheduleRequest) : ApiResponse<TaskStatus?> {
        val localVariableConfig = tasksSchedulePostRequestConfig(taskScheduleRequest = taskScheduleRequest)
>>>>>>> origin/coderabbitai/docstrings/78f34ad

        return request<TaskScheduleRequest, TaskStatus>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation tasksSchedulePost
     *
<<<<<<< HEAD
     * @param taskScheduleRequest
     * @return RequestConfig
     */
    fun tasksSchedulePostRequestConfig(taskScheduleRequest: TaskScheduleRequest): RequestConfig<TaskScheduleRequest> {
=======
     * @param taskScheduleRequest 
     * @return RequestConfig
     */
    fun tasksSchedulePostRequestConfig(taskScheduleRequest: TaskScheduleRequest) : RequestConfig<TaskScheduleRequest> {
>>>>>>> origin/coderabbitai/docstrings/78f34ad
        val localVariableBody = taskScheduleRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/tasks/schedule",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
<<<<<<< HEAD
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent)
            .build().encodedPathSegments[0]
=======
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
>>>>>>> origin/coderabbitai/docstrings/78f34ad
}
